/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode searchBST(TreeNode root, int val) {
        // base cases
        if(root == null){
            return null;
        }
        if(root.val == val){
            return root;
        }
        // recursive cases
        if(root.val > val){ // search left if current node value is more than search val
            return searchBST(root.left, val);
        }else if(root.val < val){
            return searchBST(root.right, val); // search right if current node value is less than search val
        }else{
            return null;
        }
    }
}


//PROBLEM DESCRIPTION (EASY)
You are given the root of a binary search tree (BST) and an integer val.

Find the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.

 

Example 1:


Input: root = [4,2,7,1,3], val = 2
Output: [2,1,3]
Example 2:


Input: root = [4,2,7,1,3], val = 5
Output: []
